name: Deploy Frontend to K8s

on:
  push:
    branches:
      - prod/master_cloud
  workflow_dispatch:

env:
  DOCKER_REGISTRY: ${{ secrets.DOCKER_USERNAME }}
  IMAGE_TAG: latest

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    name: Build and Push Frontend Image

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile
          push: true
          tags: ${{ secrets.DOCKER_USERNAME }}/frontend:latest
          platforms: linux/amd64
          cache-from: type=registry,ref=${{ secrets.DOCKER_USERNAME }}/frontend:latest
          cache-to: type=inline

      - name: Generate Build Summary
        run: |
          echo "## Docker Build - Frontend" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "Image built and pushed successfully" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Repository**: ${{ secrets.DOCKER_USERNAME }}/frontend" >> $GITHUB_STEP_SUMMARY
          echo "**Tags**: latest" >> $GITHUB_STEP_SUMMARY

  deploy-to-production:
    runs-on: ubuntu-latest
    needs: build-and-push
    name: Deploy Frontend to Production
    environment:
      name: production

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install kubectl
        uses: azure/setup-kubectl@v3
        with:
          version: 'v1.28.0'

      - name: Configure kubectl
        run: |
          mkdir -p $HOME/.kube
          echo "${{ secrets.KUBE_CONFIG_PRODUCTION }}" | base64 -d > $HOME/.kube/config
          chmod 600 $HOME/.kube/config
          kubectl config set-cluster default --insecure-skip-tls-verify=true

      - name: Verify cluster connection
        run: |
          kubectl cluster-info
          kubectl get nodes

      - name: Deploy Frontend to K8s
        run: |
          DOCKER_REGISTRY="${{ secrets.DOCKER_USERNAME }}"
          IMAGE_TAG="${{ env.IMAGE_TAG }}"
          
          echo "🚀 Deploying Frontend..."
          echo "  DOCKER_REGISTRY: $DOCKER_REGISTRY"
          echo "  IMAGE_TAG: $IMAGE_TAG"
          
          # 替换环境变量并部署
          cat k8s/frontend.yaml | \
            sed "s|\${DOCKER_REGISTRY}|$DOCKER_REGISTRY|g" | \
            sed "s|\${IMAGE_TAG}|$IMAGE_TAG|g" | \
            kubectl apply -f -

      - name: Restart Frontend Deployment
        run: |
          echo "🔄 Restarting frontend deployment to pull latest image..."
          kubectl rollout restart deployment gamevault-frontend -n gamevault

      - name: Wait for deployment to be ready
        run: |
          echo "⏳ Waiting for frontend to be ready..."
          kubectl wait --for=condition=available deployment/gamevault-frontend -n gamevault --timeout=300s
          echo "✅ Frontend is ready!"

      - name: Configure Nginx on EC2
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.CLOUD_EC2_HOST }}
          username: ${{ secrets.CLOUD_EC2_USER }}
          key: ${{ secrets.CLOUD_EC2_SSH_KEY }}
          script: |
            # 配置 Nginx
            sudo tee /etc/nginx/sites-available/gamevault > /dev/null <<'NGINX_EOF'
            server {
                listen 80;
                server_name _;
                client_max_body_size 50M;

                location /uploads/ {
                    proxy_pass http://localhost:30187/uploads/;
                    proxy_set_header Host $host;
                    proxy_set_header X-Real-IP $remote_addr;
                    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
                    proxy_set_header X-Forwarded-Proto $scheme;
                    expires 30d;
                    add_header Cache-Control "public, immutable";
                }

                location /api {
                    proxy_pass http://localhost:30187;
                    proxy_http_version 1.1;
                    proxy_set_header Upgrade $http_upgrade;
                    proxy_set_header Connection 'upgrade';
                    proxy_set_header Host $host;
                    proxy_set_header X-Real-IP $remote_addr;
                    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
                    proxy_set_header X-Forwarded-Proto $scheme;
                    proxy_cache_bypass $http_upgrade;
                    proxy_read_timeout 300s;
                    proxy_connect_timeout 75s;
                }

                location / {
                    proxy_pass http://localhost:30080;
                    proxy_http_version 1.1;
                    proxy_set_header Upgrade $http_upgrade;
                    proxy_set_header Connection 'upgrade';
                    proxy_set_header Host $host;
                    proxy_set_header X-Real-IP $remote_addr;
                    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
                    proxy_set_header X-Forwarded-Proto $scheme;
                    proxy_cache_bypass $http_upgrade;
                }
            }
            NGINX_EOF
            
            sudo ln -sf /etc/nginx/sites-available/gamevault /etc/nginx/sites-enabled/gamevault
            sudo rm -f /etc/nginx/sites-enabled/default
            sudo nginx -t && sudo systemctl reload nginx
            sudo chmod -R 755 /gamevault/uploads/ || true
            
            echo "✅ Nginx configured!"

      - name: Get deployment status
        run: |
          echo "## Frontend Deployment" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "Frontend deployed to production" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Environment**: Production" >> $GITHUB_STEP_SUMMARY
          echo "**Image**: ${{ secrets.DOCKER_USERNAME }}/frontend:latest" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Frontend Pod:" >> $GITHUB_STEP_SUMMARY
          echo '```' >> $GITHUB_STEP_SUMMARY
          kubectl get pods -n gamevault | grep frontend >> $GITHUB_STEP_SUMMARY
          echo '```' >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Frontend Service:" >> $GITHUB_STEP_SUMMARY
          echo '```' >> $GITHUB_STEP_SUMMARY
          kubectl get svc -n gamevault | grep frontend >> $GITHUB_STEP_SUMMARY
          echo '```' >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Access URL:" >> $GITHUB_STEP_SUMMARY
          echo "- **Frontend**: http://${{ secrets.CLOUD_EC2_HOST }}" >> $GITHUB_STEP_SUMMARY

      - name: Rollback on failure
        if: failure()
        run: |
          echo "❌ Deployment failed! Rolling back..." >> $GITHUB_STEP_SUMMARY
          kubectl rollout undo deployment gamevault-frontend -n gamevault
          kubectl wait --for=condition=available deployment/gamevault-frontend -n gamevault --timeout=300s