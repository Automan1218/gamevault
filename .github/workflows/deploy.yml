name: Deploy Frontend to K8s

on:
  push:
    branches:
      - prod/master_cloud
  workflow_dispatch:

env:
  DOCKER_REGISTRY: ${{ secrets.DOCKER_USERNAME }}
  IMAGE_TAG: latest

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    name: Build and Push Frontend Image

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile
          push: true
          tags: ${{ secrets.DOCKER_USERNAME }}/frontend:latest
          platforms: linux/amd64
          cache-from: type=registry,ref=${{ secrets.DOCKER_USERNAME }}/frontend:latest
          cache-to: type=inline

      - name: Generate Build Summary
        run: |
          echo "## Docker Build - Frontend" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "Image built and pushed successfully" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Repository**: ${{ secrets.DOCKER_USERNAME }}/frontend" >> $GITHUB_STEP_SUMMARY
          echo "**Tags**: latest" >> $GITHUB_STEP_SUMMARY

  deploy-to-production:
    runs-on: ubuntu-latest
    needs: build-and-push
    name: Deploy Frontend to Production
    environment:
      name: production

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install kubectl
        uses: azure/setup-kubectl@v3
        with:
          version: 'v1.28.0'

      - name: Configure kubectl
        run: |
          mkdir -p $HOME/.kube
          echo "${{ secrets.KUBE_CONFIG_PRODUCTION }}" | base64 -d > $HOME/.kube/config
          chmod 600 $HOME/.kube/config
          kubectl config set-cluster default --insecure-skip-tls-verify=true

      - name: Verify cluster connection
        run: |
          kubectl cluster-info
          kubectl get nodes

      - name: Install Ingress Controller (if not exists)
        run: |
          echo "Checking if Ingress Controller exists..."
          if ! kubectl get namespace ingress-nginx > /dev/null 2>&1; then
            echo "Installing Ingress Nginx Controller..."
            kubectl apply -f https://raw.githubusercontent.com/kubernetes/ingress-nginx/controller-v1.8.1/deploy/static/provider/cloud/deploy.yaml
          
            echo "⏳ Waiting for Ingress Controller to be ready..."
            kubectl wait --namespace ingress-nginx \
              --for=condition=ready pod \
              --selector=app.kubernetes.io/component=controller \
              --timeout=300s
          
            echo "Ingress Controller installed successfully!"
          else
            echo "Ingress Controller already exists"
          fi

      - name: Force set Ingress Controller Service to NodePort
        run: |
          echo "Forcing Ingress Controller Service type to NodePort..."
          kubectl patch svc ingress-nginx-controller -n ingress-nginx -p '{"spec": {"type": "NodePort"}}'
          kubectl get svc -n ingress-nginx

      - name: Deploy Frontend to K8s
        run: |
          DOCKER_REGISTRY="${{ secrets.DOCKER_USERNAME }}"
          IMAGE_TAG="${{ env.IMAGE_TAG }}"
          
          echo "🚀 Deploying Frontend..."
          echo "  DOCKER_REGISTRY: $DOCKER_REGISTRY"
          echo "  IMAGE_TAG: $IMAGE_TAG"
          
          # 替换环境变量并部署 Frontend
          cat k8s/frontend.yaml | \
            sed "s|\${DOCKER_REGISTRY}|$DOCKER_REGISTRY|g" | \
            sed "s|\${IMAGE_TAG}|$IMAGE_TAG|g" | \
            kubectl apply -f -

      - name: Deploy Ingress
        run: |
          echo "Deploying Ingress..."
          kubectl apply -f k8s/ingress.yaml
          
          echo "Ingress Status:"
          kubectl get ingress -n gamevault

      - name: Restart Frontend Deployment
        run: |
          echo "Restarting frontend deployment to pull latest image..."
          kubectl rollout restart deployment gamevault-frontend -n gamevault

      - name: Wait for deployment to be ready
        run: |
          echo "Waiting for frontend to be ready..."
          kubectl wait --for=condition=available deployment/gamevault-frontend -n gamevault --timeout=300s
          echo "Frontend is ready!"

      - name: Get Ingress LoadBalancer IP
        run: |
          echo "Waiting for Ingress LoadBalancer IP..."
          sleep 10
          
          INGRESS_IP=$(kubectl get ingress gamevault-ingress -n gamevault -o jsonpath='{.status.loadBalancer.ingress[0].ip}' 2>/dev/null || echo "Pending")
          
          if [ "$INGRESS_IP" = "Pending" ] || [ -z "$INGRESS_IP" ]; then
            echo "LoadBalancer IP not yet assigned, checking NodePort..."
            INGRESS_PORT=$(kubectl get svc ingress-nginx-controller -n ingress-nginx -o jsonpath='{.spec.ports[?(@.name=="http")].nodePort}')
            echo "INGRESS_URL=http://${{ secrets.CLOUD_EC2_HOST }}:${INGRESS_PORT}" >> $GITHUB_ENV
          else
            echo "INGRESS_URL=http://${INGRESS_IP}" >> $GITHUB_ENV
          fi

      - name: Get deployment status
        run: |
          echo "## Frontend Deployment" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "Frontend deployed to production via Ingress" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Environment**: Production" >> $GITHUB_STEP_SUMMARY
          echo "**Image**: ${{ secrets.DOCKER_USERNAME }}/frontend:latest" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Frontend Pod:" >> $GITHUB_STEP_SUMMARY
          echo '```' >> $GITHUB_STEP_SUMMARY
          kubectl get pods -n gamevault | grep frontend >> $GITHUB_STEP_SUMMARY
          echo '```' >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Services:" >> $GITHUB_STEP_SUMMARY
          echo '```' >> $GITHUB_STEP_SUMMARY
          kubectl get svc -n gamevault >> $GITHUB_STEP_SUMMARY
          echo '```' >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Ingress:" >> $GITHUB_STEP_SUMMARY
          echo '```' >> $GITHUB_STEP_SUMMARY
          kubectl get ingress -n gamevault >> $GITHUB_STEP_SUMMARY
          echo '```' >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Access URL:" >> $GITHUB_STEP_SUMMARY
          echo "- **Application**: ${{ env.INGRESS_URL }}" >> $GITHUB_STEP_SUMMARY

      - name: Rollback on failure
        if: failure()
        run: |
          echo "Deployment failed! Rolling back..." >> $GITHUB_STEP_SUMMARY
          kubectl rollout undo deployment gamevault-frontend -n gamevault
          kubectl wait --for=condition=available deployment/gamevault-frontend -n gamevault --timeout=300s